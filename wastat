#!/bin/sh

# wastat toolkit script
# license: MIT (see LICENSE)

errcho() {
	>&2 echo "$*"
}

show_help () {
    errcho "wastat toolkit v0.4, by phikal"
    errcho
    errcho "usage:"
    errcho "    word-count, wc:"
    errcho "        count word occurances"
    errcho "        default chat file: chat.txt or 2nd argument"
	errcho "    user-word-count, uwc:"
    errcho "        count word occurances per user"
    errcho "        default chat file: chat.txt or 2nd argument"
    errcho "    word-output, wo:"
    errcho "        output all words separately"
    errcho "        default chat file: chat.txt or 2nd argument"
    errcho "    user-count, uc:"
    errcho "        count ammount of messages per user"
    errcho "        default chat file: chat.txt or 2 argument"
    errcho "    plot-dates, pd:"
    errcho "        plot all dates"
    errcho "        default chat file: chat.txt or 2nd argument"
    errcho "        the first and last date automatically extracted"
    errcho "        can be manaully set as 3rd and 4th argument"
    errcho "    plot-users, pu:"
    errcho "        plot all users' dates individually"
    errcho "        default chat file: chat.txt or 2nd argument"
    errcho "        the first and last date automatically extracted"
    errcho "        can be manaully set as 3rd and 4th argument"
    errcho "        programm will Query users to be plotted from stdin"
    errcho "    plot-user-times, put:"
    errcho "        plot accumalative ammount of messages sent over all days individually"
    errcho "        default chat file: chat.txt"
    errcho "        programm will Query users to be plotted from stdin"
    errcho "    plot-times, pt:"
    errcho "        plot accumalative ammount of messages sent over all days"
    errcho "        default chat file: chat.txt or 2nd argument"
    errcho "    clean:"
    errcho "        remove all generated content from direcory"
    errcho "    help, -h:"
    errcho "        this message"
}

plot_times () {
    if ! type gnuplot > /dev/null; then
        errcho "gnuplot is needed to plot the data"
        exit 1
    fi

    INPUT=${1:-chat.txt}

    errcho "Using $INPUT to plot accumulative message count over all days"
    ./waextr t $INPUT | sort | uniq -c |\
		./fmt > time.dat
    errcho "Finished extraction, opening gnuplot..."
    gnuplot -p times.gp
}


plot_user_times () {
    if ! type gnuplot > /dev/null; then
        errcho "gnuplot is needed to plot the data"
        exit 1
    fi

    INPUT=${1:-chat.txt}

    errcho "Using $INPUT to plot accumulative message count over all days"
    errcho "You will be presented a list of all individual partipants from $INPUT"
    errcho "Please [c]onfirm or [m]odify user names (anything else is ignored)"

    cp indiv_t.templ.gp indiv_t.gp

    COUNT=0
	mkdir user
    for user in $(./waextr u $INPUT | sort | uniq | sed 's/ /_/g'); do
		name=$(echo $user | sed 's/_/ /g')

        printf "%s\t\t[c/m/*]: " $user
        read choice
        case "$choice" in
            c) ;;
            m)  printf "Enter alias: "
                read name;;
            *) continue ;;
        esac

        awk -v usern="$user" -f ./waextr d $INPUT |\
            sort | uniq -c |\
            ./fmt > "user/$user.dat"
        printf " (%s)" $(cat "user/$user.dat" 2> /dev/null | wc -l)

        if [ $COUNT -eq 0 ]; then
            printf "p" >> indiv_t.gp
        else
            printf "," >> indiv_t.gp
        fi

        printf "\\\\\n\t\"user/$user.dat\" u 2:1 t \"$name\"" >> indiv_t.gp
        COUNT=$(($COUNT+1))

        echo
    done

    if [ $COUNT -eq 0 ]; then
        errcho "It seems like you either didn't select anyone, or nobody could be selected...\nQuitting."
        exit 1
    fi

    errcho "Finished extraction, opening gnuplot..."
    gnuplot -p indiv_t.gp
}

plot_users () {
    if ! type gnuplot > /dev/null; then
        errcho "gnuplot is needed to plot the data"
        exit 1
    fi

    INPUT=${1:-chat.txt}

    FIRST=$(head -1 $INPUT | cut -f1)
    LAST=$(tail -1 $INPUT | cut -f1)

    START=${2:-$FIRST}
    END=${3:-$LAST}

    errcho "Using $INPUT to plot $COUNT users over time from $START to $END"
    errcho "You will be presented a list of all individual partipants from $INPUT"
    errcho "Please [c]onfirm or [m]odify user names (anything else is ignored)"

    cp indiv_d.templ.gp indiv_d.gp

    COUNT=0
    for user in $(./waextr u $INPUT | sort | uniq | sed 's/ /_/g'); do
        printf "%s\t\t[c/m/*]: " $user
        read choice

        ouser=$(echo $user | sed 's/_/ /g')
        name=$ouser

        case "$choice" in
            c) ;;
            m)  printf "Enter alias: "
                read name;;
            *) continue ;;
        esac

        ./waextr ud $INPUT |\
            awk -v |\
            sed 's/^.*\t//' |\
            sort | uniq -c |\
            ./fmd $START $END > "$user.dat"
        printf " (%s)" $(cat "$user.dat" 2> /dev/null | wc -l)

        if [ $COUNT -eq 0 ]; then
            printf "p" >> indiv_d.gp
        else
            printf "," >> indiv_d.gp
        fi

        printf "\\\\\n\t\"$user.dat\" u 2:1 t \"$name\"" >> indiv_d.gp
        COUNT=$(($COUNT+1))

        echo
    done

    if [ $COUNT -eq 0 ]; then
        errcho "It seems like you either didn't select anyone, or nobody could be selected...\nQuitting."
        exit 1
    fi

    errcho "Finished extraction, opening gnuplot..."
    gnuplot -p indiv_d.gp
}

plot_dates () {
    if ! type gnuplot > /dev/null; then
        errcho "gnuplot is needed to plot the data"
        exit 1
    fi

    INPUT=${1:-chat.txt}

    FIRST=$(head -1 $INPUT | cut -f1)
    LAST=$(tail -1 $INPUT | cut -f1)

    START=${2:-$FIRST}
    END=${3:-$LAST}

    errcho "Using $INPUT to plot message count over time from $START to $END"
    ./waextr d $INPUT | sort | uniq -c |\
		./fmd $START $END > date.dat
    errcho "Finished extraction, opening gnuplot..."
    gnuplot -p dates.gp
}

user_count () {
    INPUT=${1:-chat.txt}
    ./waextr u $INPUT | sort | uniq -c | sort -nr
}

word_output () {
    INPUT=${1:-chat.txt}
    ./waextr m $INPUT | grep -E -o "\w+"
}

word_count () {
    INPUT=${1:-chat.txt}
    ./waextr m $INPUT | grep -E -o "\w+" |\
		sort | uniq -c | sort -nr
}


user_word_count () {
    INPUT=${1:-chat.txt}

	for user in $(./waextr u $INPUT | sort | uniq | sed 's/ /_/g'); do
		awk -v user="$user"\
			'BEGIN { FS="\t"; gsub(/_/, " ", user) }
             $3 == user { count += split($4, a, /  */) }
             END { printf("%8d %s\n", count, user) }' $INPUT
	done | sort -nr
}

clean() {
    rm *.dat 2> /dev/null
    rm indiv_{t,d}.gp 2> /dev/null
    errcho "Cleaned up."
}

case "$1" in
    word-count|wc)  	 shift; word_count "$@";;
    user-word-count|uwc) shift; user_word_count "$@";;
    word-output|wo)  	 shift; word_output "$@";;
    user-count|uc)  	 shift; user_count "$@";;
    plot-dates|pd)  	 shift; plot_dates "$@";;
    plot-users|pu)  	 shift; plot_users "$@";;
    plot-times|pt)  	 shift; plot_times "$@";;
    plot-user-times|put) shift; plot_user_times "$@";;
    clean)               clean;;
    help|-h)             show_help;;
    *)                   show_help; exit 1;;
esac
